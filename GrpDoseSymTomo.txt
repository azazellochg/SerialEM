MacroName GrpDoseSymTomo

# Less conservative dose-symmetric tilt scheme for tomography 
# Tilt, track-before, drift, autofocus, image, track-after.
# EMBL Heidelberg 2016, Wim J.H.Hagen
# Modified by Dustin Morado, 2018
# Modified by Grigory Sharov, Nov 2018
#
# Images:
# Track plus in buffer K
# Track min in buffer L
# Record plus in buffer M
# Record min in buffer N

# SerialEM settings:
# Roll buffers A -> H

########## SETTINGS ########## 

step            = 3     # tilt step
maxtilt         = 60    # maximum +/- tilt angle
group           = 2     # number of tilt steps per group
Tiltbacklash    = -1    # negative tilts can be backlashed by this
wait            = 0     # wait after tilt in sec 
TD_low          = -2    # low defocus microns
TD_high         = -4    # high defocus microns
delta           = 0.25  # defocus step microns
driftcrit       = 7     # max drift in Angstroms/s
drifttimes      = 5     # N times to repeat drift measurement

debug           = 0     # debug mode, do not suppress reports

########## END SETTINGS ########## 

ProgramTimeStamps
echo Started macro GrpDoseSymTomo!
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

if $debug == 0
    SuppressReports
    ErrorsToLog
    NoMessageBoxOnError
endif

# Set limits on the absolute focus reached during autofocus runs.
AbsoluteFocusLimits -15 15

# Set limits on the focus change during autofocus.
#FocusChangeLimits -5 5

ReportMinuteTime
macrostarttime = $RepVal1

MoveToNavItem

# Creates a log for this tilt-series
ReportCurrentFilename 1
SaveLogOpenNew $ReportedValue1

ReportNavItem
echo Moved to: $navLabel X=$RepVal2, Y=$RepVal3, Z=$RepVal4

echo Check if dark reference needs updating...
UpdateHWDarkRef  3 #every three hours seems ok

# Get eucentric
echo Doing Eucentricity both...
Eucentricity 3
UpdateItemZ

# realign to item
Callfunction CheckAutoFill
echo Doing RealignToItem
RealignToNavItem 1

CallFunction CycleDefocus
ReportTargetDefocus
echo Target defocus [from $TD_low to $TD_high] : $RepVal1 um

branchesteps = $maxtilt / $group / $step

plustilt = 0
mintilt = 0

# zero tilt image
CallFunction TiltZero

# loop back and forth in groups
loop $branchesteps
	loop $group
	        plustilt = $plustilt + $step
	        CallFunction TiltPlus
	endloop	
	loop $group
	        mintilt = $mintilt - $step
                CallFunction TiltMinus
	endloop
endLoop

# finish
TiltTo 0
SetDefocus 0
ResetImageShift
CloseFile
ReportMinuteTime
totaltime = $RepVal1 - $macrostarttime
echo Tomogram for item $NavLabel acquired in $totaltime minutes!
echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

function TiltZero
    echo Doing untilted image...
	ReportStageXYZ
	StageX = $ReportedValue1
	StageY = $ReportedValue2

	# track
    CallFunction CheckAutoFill
    GoToLowDoseArea R
    ResetClock
    echo Taking Trial image for tracking...
	T
	Copy A K
	Copy A L
	
	# Measure focus and drift
	ReportTargetDefocus
	echo Measuring focus (target $RepVal1 um) and drift ($driftcrit A/s max)...
	Delay $wait
	CallFunction DriftAndFocus $driftcrit $drifttimes

	ReportDefocus
	focusplus = $RepVal1
	focusmin = $RepVal1

	# Record
    CallFunction CheckAutoFill
    echo Taking Record...
    #EarlyReturnNextShot -1
	R
	S
	Copy A M
	Copy A N

	ReportImageShift
	ISxplus = $RepVal1
	ISyplus = $RepVal2
	ISxminus = $RepVal1
	ISyminus = $RepVal2

	# Tracking after
    CallFunction CheckAutoFill
    echo Tracking after: item $navLabel, tilt 0, img shifts: $ISxplus $ISyplus, defocus $focusplus
	T
	Copy A K
	Copy A L
endfunction

function TiltPlus
    echo Tilting to $plustilt...
	TiltTo $plustilt
	MoveStageTo $StageX $StageY
	
	CallFunction CheckTiltAngle $plustilt

	# set to previous used shift/focus
	GoToLowDoseArea R
	SetDefocus $focusplus
	SetImageShift  $ISxplus $ISyplus

	# Track
    CallFunction CheckAutoFill
    ResetClock
	echo Taking Trial image for tracking...
	T
	AlignTo K
	
  	# Measure focus and drift
	ReportTargetDefocus
	echo Measuring focus (target $RepVal1 um) and drift ($driftcrit A/s max)...
	Delay $wait
	CallFunction DriftAndFocus $driftcrit $drifttimes

	ReportDefocus
	focusplus =  $RepVal1

	# Record
    CallFunction CheckAutoFill
    echo Taking Record...
    #EarlyReturnNextShot -1
	R
	S
	AlignTo M
	Copy A M

	ReportImageShift
	ISxplus = $RepVal1
	ISyplus = $RepVal2

	# Tracking after
	CallFunction CheckAutoFill
	echo Tracking after: item $navLabel, tilt $plustilt, img shifts: $ISxplus $ISyplus, defocus $focusplus
    T
	Copy A K
endfunction

Function TiltMinus
    echo Tilting to $mintilt...
	TiltTo $mintilt
	TiltBy $Tiltbacklash
	TiltTo $mintilt
	MoveStageTo $StageX $StageY

	# set to previous used shift/focus	
	GoToLowDoseArea R
	SetDefocus $focusmin
	SetImageShift  $ISxminus $ISyminus
	
	# Track
    CallFunction CheckAutoFill
    ResetClock
	echo Taking Trial image for tracking...
	T
	AlignTo L
	
   	# Measure focus and drift
	ReportTargetDefocus
	echo Measuring focus (target $RepVal1 um) and drift ($driftcrit A/s max)...
	Delay $wait
	CallFunction DriftAndFocus $driftcrit $drifttimes

	ReportDefocus
	focusmin =  $RepVal1

	# Record
    CallFunction CheckAutoFill
    echo Taking Record...
    #EarlyReturnNextShot -1
	R
	S
	AlignTo N
	Copy A N

	ReportImageShift
	ISxminus = $RepVal1
	ISyminus = $RepVal2

	# Tracking after
	CallFunction CheckAutoFill
	echo Tracking after: item $navLabel, tilt $mintilt, img shifts: $ISxplus $ISyplus, defocus $focusmin
	T
	Copy A L
endfunction

Function CheckAutoFill
loop 10
	AreDewarsFilling
	if $RepVal1 == 0
		break
	elseif $RepVal1 == 1
                echo Dewars are filling! Delay for 60 sec...
		delay 60 sec
	endif
endloop
endfunction

Function CycleDefocus
   bigstep = $TD_low - $TD_high 
   ReportTargetDefocus
   TD = $reportedValue1

   if $TD > $TD_low
      diff = $TD - $TD_low
      IncTargetDefocus -$diff
   elseif $TD > $TD_high 
      IncTargetDefocus -$delta
   else
      IncTargetDefocus $bigstep
   endif
endfunction


Function DriftAndFocus 2 0 drift_tol n_drift
    GoToLowDoseArea F
    Loop $n_drift
        CallFunction CheckAutoFill
        AutoFocus
        ReportFocusDrift dx dy
        drift = 10 * SQRT ( ( $dx * $dx ) + ( $dy * $dy ) )
        If $drift <= $drift_tol
            Break
        EndIf
    EndLoop
EndFunction

Function CheckTiltAngle 1 0 tiltangle
    ReportTiltAngle
    mTilt = NEARINT $RepVal1
    if $tiltangle != $mTilt
        echo Target tilt = $tiltangle, real tilt = $mTilt. NOT ok!
        TiltTo $tiltangle
    endif
