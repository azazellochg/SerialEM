MacroName Montage neg.stain
LongName Montage for neg.stain acquisition of plain carbon grids
# Grigory Sharov, MRC-LMB 22/06/2017

# Preparation:
# 1) Check eucentricity, calibrate Image Shift and Autofocus
# 2) In Montage Control Panel tick only "Show Overview at End"
# 3) Check Record & Trial (for drift estimation) params
# 4) Run one montage manually to figure out max image shift for the current magnification
# 5) Start macro at the top left corner of the grid square (1/2 shift away from the edges!)

###################################
# Edit the following parameters:

SetDirectory \\EM-SUPPORT3\Spirit\Grigory\Folder
x = 5               # montage X by Y patches: X-axis points downwards, Y-axis - rightwards
y = 5
Xsteps = 8          # Number of stage shift steps in X direction
Ysteps = 8          # Number of stage shift steps in Y direction
shift = 4           # 4um shift between montage areas (adjust to 2x [max image shift])
delay = 5           # 5 sec delay after stage shift
drift = 5           # 5A/s max drift
autofocus = 5       # autofocus every 5th image
defLow = -1.0       # defocus min, in microns
defHigh = -2.5      # defocus max
defStep = 0.2       # defocus step

indexImg = 1        # change this index for every gridsquare (new file will be montage_$index.mrc)

###################################
Verbose 0
FocusChangeLimits -5 5       #  If focus changes too much, abort and use original
TestShiftX = $shift * $Xsteps
TestShiftY = $shift * $Ysteps
YesNoBox Proceed with a test stage shift (to final X, then final Y-position)? Look at the screen to see if you are still on a gridsquare.
If $ReportedValue1 == 1
    ScreenDown
    MoveStage $TestShiftX
    Delay 3 sec
    MoveStage $TestShiftY
    YesNoBox Are you still on a grid square? If not, cancel the script and change X/Y-steps params!
    Echo Moving stage back to starting position...
    MoveStage -$TestShiftX -$TestShiftY
    If $ReportedValue1 == 1
        Delay 10 sec
    Else
        Exit

# The following will acquire montage maps in a snake-like manner
# from top left to bottom right corner of grid square

SetTargetDefocus $defLow
Autofocus

Loop $Ysteps row
    Loop $Xsteps
        ResetClock
        SetBeamBlank 1
        OpenNewMontage $x $y montage_$indexImg.mrc
        SetMontageParams 0 204 204 2048 2048 1 # No stage move, overlap x=y=206, frame size x=y=2048, skip correlations
        Delay $delay sec
        CallFunction CycleTargetDefocus $defLow $defHigh $defStep
        checkAutofocus = modulo $indexImg $autofocus
        If $checkAutofocus == 0
            Echo ---> Autofocusing (every $autofocus images)...
            ChangeFocus -0.5 # SerialEM mistakes when too close to focus
            Autofocus
            CallFunction Drift $drift # wait for drift below threshold
        Endif
        Montage
        CloseFile
        ReportClock
        Echo ---> Acquired montage # $indexImg in $reportedValue1 seconds!
        Echo ---------------------------------------
        If modulo $row 2 == 0 # even row numbers --> shift in the opposite direction
            MoveStage 0 -$shift
        Else
            MoveStage 0 $shift
        Endif
        indexImg = $indexImg + 1
    EndLoop
    MoveStage $shift 0 # goes to next Y-row
EndLoop

###################################
Function CycleTargetDefocus 3 0
## three variables, not string

TD_low = $argVal1
TD_high = $argVal2
step = $argVal3

Echo --> Selecting defocus within [min $TD_low, max $TD_high]um range, step $step.

## no editing below ##
delta = -1 * $step

# if the current TargetDefocus is outside of range, make it as TD_low.
# Otherwise, increase a step of $delta

SuppressReports
ReportTargetDefocus
oldDef = $reportedValue1
If $oldDef > $TD_low OR $oldDef < $TD_high
   SetTargetDefocus $TD_low
Else 
   IncTargetDefocus $delta
Endif

ReportTargetDefocus 
newDef = $repVal1
diff = $newDef - $oldDef
ChangeFocus $diff
Echo Target defocus = $repVal1 um

EndFunction
###################################
Function Drift 1 0 
# A function to measure drift rate, if good, skip to the end of loop. 
# Otherwise, exit execution -- i.e. skip the point. 

Echo ---> Measuring Drift ($argVal1 A/s max allowed)...

# parameters 
#=============
## drift rate threshold
crit = $argVal1
shot = T
interval = 3
times = 10
period = $interval + 1

$shot
Delay $interval
Loop $times index
   $shot
   AlignTo B
   ReportAlignShift
   ClearAlignment
   dx = $reportedValue3
   dy = $reportedValue4
   dist = sqrt $dx * $dx + $dy * $dy
   rate = $dist / $period * 10
   echo Estimated drift = $rate A/sec

   If $rate < $crit
      echo Drift is below specified limit after $index trials, continue...      
      break
   Elseif  $index < $times
      Delay $interval
   Else
      echo Drift has never got below $crit: Skipping ...
      exit   
   Endif
EndLoop
EndFunction
###################################
